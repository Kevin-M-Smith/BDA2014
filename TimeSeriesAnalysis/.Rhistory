setwd("~/Desktop/BDA/Time Series Analysis")
setwd("~/Desktop/BDA2014/BDA2014/TimeSeriesAnalysis")
ganges <- read.csv("data/Ganges.csv")
library(ggplot2)
ganges <- read.csv("data/Ganges.csv")
qplot("boxplot")
?qplot
qplot(ganges, "boxplot")
library(ggplot2)
ganges <- read.csv("data/Ganges.csv")
qplot(ganges, "boxplot")
ggplot(ganges, "boxplot")
ganges <- read.csv("data/Ganges.csv")
colwise(sum)(ganges)
library(plyr)
ganges <- read.csv("data/Ganges.csv")
colwise(sum)(ganges)
```
colwise(mean)(ganges)
library(plyr)
ganges <- read.csv("data/Ganges.csv")
colwise(mean)(ganges)[1:6]
colwise(mean)(ganges)["Jan":"Apr"]
library(plyr)
ganges <- read.csv("data/Ganges.csv")
colwise(mean)(ganges)["Jan":"Apr"]
library(plyr)
ganges <- read.csv("data/Ganges.csv")
colwise(mean)(ganges)[Jan:Apr]
?colwise
library(plyr)
ganges <- read.csv("data/Ganges.csv")
colwise(mean)(ganges)[2:6]
colwise(max)(ganges)[2:6]
summary(ganges)
summary(ganges[2:6])
summary(ganges["Jan"])
ganges <- read.csv("data/Ganges.csv")
summary(ganges["Jan"])
dim(ganges)
ganges <- read.csv("data/Ganges.csv")
summary(ganges["Jan"])
plot(ganges["Jan"])
ganges <- read.csv("data/Ganges.csv")
summary(ganges["Jan"])
boxplot(ganges["Jan"])
g <- ggpot(aes(x = X, y = Y)) + geom_point()
library(ggplot)
g <- ggplot(aes(x = X, y = Y)) + geom_point()
X = rnorm(100)
B = runif(100)
Y = X * B
cor(X, Y)
g <- ggplot(aes(x = X, y = Y)) + geom_point()
g <- ggplot(aes(X, Y)) + geom_point()
library(ggplot); data = data.frame(X = X, Y = Y)
g <- ggplot(data) + geom_point()
library(ggplot); data = data.frame(X = X, Y = Y)
library(ggplot2);
data = data.frame(X = X, Y = Y)
g <- ggplot(data) + geom_point()
library(ggplot2);
data = data.frame(X = X, Y = Y)
g <- ggplot(data, aes(X, Y)) + geom_point()
g
g <- ggplot(data, aes(X, Y)) + geom_point() + geom_smooth()
g
?stat_contour
g + stat_density()
```{r, fig.align='center', fig.cap="Scatterplot of Y vs. X with LOESS"}
g + geom_smooth()
```
Add LOESS Smooth
========================================
```{r, fig.align='center', fig.cap="Scatterplot of Y vs. X with LOESS"}
g + stat_density()
```
g + coord_polar(theta = "y", start = mean(y))
g + coord_polar(theta = "y", start = mean("y"))
g + coord_polar(theta = "y", start = mean(data$y)
)
g + coord_polar(theta = "y", start = mean(data$Y)
)
Polar Coordinates
========================================
```{r, fig.align='center', fig.cap="Scatterplot of Y vs. X with LOESS"}
g + coord_polar(theta = "y", start = mean(data$Y)
```
g + coord_flip()
g + geom_smooth()
geom_smooth()
?geom_smooth
g + geom_density()
<script type="text/javascript" src="js/jquery.min.js"></script>
<script type="text/javascript" src="js/jquery-ui.min.js"></script>
<script type="text/javascript" src="js/jquery.fancybox-1.3.4.pack.min.js"></script>
<script>
$(function($) {
var addToAll = true;
var gallery = false;
var titlePosition = 'inside';
$(addToAll ? 'img' : 'img.fancybox').each(function() {
var $this = $(this);
var title = $this.attr('title');
var src = $this.attr('data-big') || $this.attr('src');
var a = $('<a href="#" class="fancybox"></a>').attr('href', src).attr('title', title);
$this.wrap(a);
});
if (gallery)
$('a.fancybox').attr('rel', 'fancyboxgallery');
$('a.fancybox').fancybox({
titlePosition: titlePosition
});
});
</script>
<link type="text/css" rel="stylesheet" media="screen" href="css/jquery.fancybox-1.3.4.css" />
========================================================
<div style="font-size: 2em; line-height: 100%;">
Dynamic Documents, <br /> Literate Programming, and Reproducible Research
</div>
<br><br>
<div style="font-size: 1em;">
Kevin M. Smith <br>
November 25th, 2014
</div>
Definitions
========================================================
- Dynamic Documents
- Input and output are linked
- a change in the input propogates through the document
- Literate Programming
- The Practice of Mixing Natural Languages with Programming Langauges
- Reproducible Research (for computational experiments)
- An emerging set of best practices, including __open and complete documentation of data sets and code__, documenting computational environments, random number generator seeds, etc.
An Example
========================================================
$$ X \sim N(0, 1)$$
$$ B \sim U(0, 1) $$
$$ Y \equiv B \cdot X $$
```{r}
X = rnorm(100)
B = runif(100)
Y = X * B
cor(X, Y)
```
<br>
### __Query:__
Is the relationship $Y = f(X)$ linear?
Build the Plot
========================================================
Import
```{r}
library(ggplot2);
data = data.frame(X = X, Y = Y)
```
Base Layer
```{r}
g <- ggplot(data, aes(X, Y))
```
Scatterplot Layer
```{r}
g <- g + geom_point()
```
Scatterplot
========================================
```{r, fig.align='center', fig.cap="Scatterplot of Y vs. X"}
g
```
Add LOESS Smooth
========================================
```{r, fig.align='center', fig.cap="Scatterplot of Y vs. X with LOESS"}
g + geom_smooth()
```
Flip Coordinates
========================================
```{r, fig.align='center', fig.cap="Scatterplot of Y vs. X with LOESS"}
g + coord_flip()
```
Polar Coordinates
========================================
```{r, fig.align='center', fig.cap="Scatterplot of Y vs. X with LOESS"}
g + geom_density()
```
g + geom_countour()
g <- ggplot(data, aes(x = X, y = Y)) + stat_density2d()
g
g <- ggplot(data, aes(x = X)) + geom_density()
g <- ggplot(data, aes(x = X))
g <- geom_density() + xlim(-5, 5)
g <- g + geom_density(aes(color = "X")) + xlim(-5, 5)
g
g <- ggplot(data, aes(x = X))
g <- g + geom_density(aes(Fill = "X")) + xlim(-5, 5)
g
g <- ggplot(data, aes(x = X))
g <- g + geom_density(aes(fill = "X")) + xlim(-5, 5)
g
g <- g + geom_density(aes(x = rnorm(1000)))
g
g <- ggplot(data, aes(x = X))
g <- g + geom_density(aes(fill = "X")) + xlim(-5, 5)
g <- g + geom_density(aes(x = rnorm(100000)))
g
norm <- rnorm(1E6)
norm
g <- ggplot(norm) + geom_density()
g <- ggplot(data = norm) + geom_density()
g <- ggplot(data, aes(x = X))
g
g <- base + geom_density(aes(fill = "X")) + xlim(-5, 5)
base <- ggplot(data, aes(x = X, y = Y))
g <- base + geom_density(aes(fill = "X")) + xlim(-5, 5)
g
g <- base + geom_density(aes(x = X, fill = "X")) + xlim(-5, 5)
g
base
base + geom_point()
base + geom_density()
norm <- rnorm(1E6)
g <- ggplot(data)
g <- geom_density(aes(x = norm, fill = "Normal"))
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g
norm <- rnorm(1E6)
g <- ggplot(data) + scale_fill_continuous("Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(fill = "X"))
g
g <- ggplot(data) + scale_fill_continuous("Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = x, fill = "X"))
g
g <- ggplot() + scale_fill_continuous("Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = x, fill = "X"))
norm <- rnorm(1E6)
g <- ggplot() + scale_fill_continuous("Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = data$x, fill = "X"))
g
norm <- rnorm(1E6)
g <- ggplot() + scale_fill_continuous("Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(data, aes(x = x, fill = "X"))
norm <- rnorm(1E6)
g <- ggplot(data) + scale_fill_continuous("Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(X, fill = "X"))
g
norm <- rnorm(1E6)
g <- ggplot(data) + scale_fill_continuous("Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"))
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"))
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + scale_fill_continuous(name = "Legend") + theme(legend = "top")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + scale_fill_continuous(name = "Legend") + theme(legend.pos = "top")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + scale_fill_continuous(name = "Legend") + theme(legend.position = "top")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + scale_fill_continuous(name = "Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + scale_fill_continuous(name = "Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
g
norm <- rnorm(1E6)
g <- ggplot(data)
g <- g + scale_fill_discrete(name = "Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
g
norm <- rnorm(1E6)
g <- ggplot(data) + theme(legend.position = "top")
g <- g + scale_fill_discrete(name = "Legend")
g <- g + geom_density(aes(x = norm, fill = "Normal"))
g <- g + geom_density(aes(x = X, fill = "X"), alpha = 0.5)
